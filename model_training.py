# -*- coding: utf-8 -*-
"""model training

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wb_SXOwE7deY6y33utEoreHXqppqdHq0
"""

import pandas as pd
import numpy as np
import joblib
import librosa
import librosa.display
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV, cross_val_predict
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.pipeline import make_pipeline

import pandas as pd

# Load dataset
data = pd.read_csv("features_30_sec.csv")
print("✅ Dataset Loaded Successfully!")

# Features to use
selected_features = [
    'chroma_stft_mean', 'chroma_stft_var', 'rms_mean', 'rms_var',
    'spectral_centroid_mean', 'spectral_centroid_var', 'spectral_bandwidth_mean', 'spectral_bandwidth_var',
    'rolloff_mean', 'rolloff_var', 'zero_crossing_rate_mean', 'zero_crossing_rate_var',
    'mfcc1_mean', 'mfcc2_mean', 'mfcc3_mean', 'mfcc4_mean', 'mfcc5_mean', 'mfcc6_mean', 'mfcc7_mean',
    'mfcc8_mean', 'mfcc9_mean', 'mfcc10_mean', 'mfcc11_mean', 'mfcc12_mean', 'mfcc13_mean',
    'mfcc14_mean', 'mfcc15_mean', 'mfcc16_mean', 'mfcc17_mean', 'mfcc18_mean', 'mfcc19_mean', 'mfcc20_mean'
]

# Extract Features & Labels
X = data[selected_features]
y = data["label"]

print(f"✅ Features and Labels Extracted! \nX shape: {X.shape} \nY shape: {y.shape}")

from sklearn.preprocessing import StandardScaler

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

print("✅ Features Scaled Successfully!")

from sklearn.svm import SVC

# Train SVM Model
svm_model = SVC(kernel="linear")
svm_model.fit(X_scaled, y)


full_model = make_pipeline(StandardScaler(), SVC(kernel='linear', C=1))
full_model.fit(X, y)
y_pred_train = full_model.predict(X)
model_accuracy = accuracy_score(y, y_pred_train)
param_grid = {
    'svc__kernel': ['linear', 'rbf'],
    'svc__C': [0.1, 1, 10],
    'svc__gamma': ['scale', 0.01, 0.001]
}

grid = GridSearchCV(
    make_pipeline(StandardScaler(), SVC()),
    param_grid=param_grid,
    cv=100,
    scoring='accuracy',
    n_jobs=-1,
    verbose=0
)

grid.fit(X, y)
y_cv_pred = cross_val_predict(grid.best_estimator_, X, y, cv=50)

# Results
print(f"Model Accuracy: {model_accuracy * 100:.2f}%")
print("Classification Report :\n", classification_report(y, y_pred_train))
print("Confusion Matrix :\n", confusion_matrix(y, y_pred_train))

import joblib

# Save Model & Scaler
joblib.dump(svm_model, "music_genre_svm_model.pkl")
joblib.dump(scaler, "scaler.pkl")

print("✅ Model & Scaler Saved Successfully!")

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Step 1: Generate confusion matrix
cm = confusion_matrix(y, y_pred_train)

# Step 2: Define class labels
class_names = ['blues', 'classical', 'country', 'disco', 'hiphop',
               'jazz', 'metal', 'pop', 'reggae', 'rock']

# Step 3: Plot the heatmap
fig, ax = plt.subplots(figsize=(8, 8))
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=class_names)
disp.plot(cmap=plt.cm.Blues, ax=ax, xticks_rotation=45)

# Step 4: Save as image
plt.title("Confusion Matrix")
plt.savefig("confusion_matrix.png", dpi=300, bbox_inches='tight')
plt.show()